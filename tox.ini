[tox]
envlist =
    fix
    py310
    py39
    py38
    py37
    readme
isolated_build = true
skip_missing_interpreters = true
minversion = 3.14

[testenv]
description = run the unit tests with pytest under {basepython}
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    COVERAGE_PROCESS_START = {toxinidir}/setup.cfg
    _COVERAGE_SRC = {envsitepackagesdir}/sphinx_argparse_cli
extras =
    graphviz
    test
commands =
    python -m pytest {tty:--color=yes} {posargs: \
      --junitxml {toxworkdir}{/}junit.{envname}.xml --cov {envsitepackagesdir}{/}pipdeptree \
      --cov {toxinidir}{/}tests --cov-fail-under=75 \
      --cov-config=pyproject.toml --no-cov-on-fail --cov-report term-missing:skip-covered --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      tests}
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} {toxworkdir}{/}coverage.{envname}.xml
package = wheel
wheel_build_env = .pkg

[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
skip_install = true
deps =
    pre-commit>=2.20
commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:readme]
description = check that the long description is valid
basepython = python3.10
skip_install = true
deps =
    build[virtualenv]>=0.9
    twine>=4.0.1
commands =
    python -m build --sdist --wheel -o {envtmpdir} .
    twine check {envtmpdir}/*

[testenv:dev]
description = generate a DEV environment
usedevelop = true
commands =
    python -m pip list --format=columns
    python -c 'import sys; print(sys.executable)'

[flake8]
max-complexity = 22
max-line-length = 120
noqa-require-code = true
dictionaries = en_US,python,technical,django

[pep8]
max-line-length = 120
