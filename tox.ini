[tox]
requires =
    tox>=4.2
env_list =
    fix
    py312
    py311
    py310
    py39
    py38
    type
    readme
skip_missing_interpreters = true

[testenv]
description = run the unit tests with pytest under {basepython}
package = wheel
wheel_build_env = .pkg
extras =
    graphviz
    test
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    COVERAGE_PROCESS_START = {toxinidir}/setup.cfg
    _COVERAGE_SRC = {envsitepackagesdir}/sphinx_argparse_cli
commands =
    python -m pytest {tty:--color=yes} {posargs: \
      --cov {envsitepackagesdir}{/}pipdeptree --cov {toxinidir}{/}tests \
      --cov-config=pyproject.toml --no-cov-on-fail --cov-report term-missing:skip-covered --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      --junitxml {toxworkdir}{/}junit.{envname}.xml \
      tests}
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} {toxworkdir}{/}coverage.{envname}.xml --fail-under 100

[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
skip_install = true
deps =
    pre-commit>=3.3.3
commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:type]
description = run type check on code base
deps =
    mypy==1.4.1
set_env =
    {tty:MYPY_FORCE_COLOR = 1}
commands =
    mypy src
    mypy tests

[testenv:readme]
description = check that the long description is valid
base_python = python3.10
skip_install = true
deps =
    build[virtualenv]>=0.10
    twine>=4.0.2
commands =
    python -m build --sdist --wheel -o {envtmpdir} .
    twine check {envtmpdir}/*

[testenv:dev]
description = generate a DEV environment
package = editable
commands =
    python -m pip list --format=columns
    python -c 'import sys; print(sys.executable)'
